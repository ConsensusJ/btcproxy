plugins {
    id("groovy")
    id 'org.asciidoctor.jvm.convert'        version '3.3.2'
    id 'org.asciidoctor.jvm.pdf'            version '3.3.2'
    id 'org.ajoberstar.git-publish'         version '4.2.0'
    id("com.bmuschko.docker-remote-api")    version "9.3.3" apply false
    id("io.micronaut.application")          version "${micronautAppGradlePluginVersion}"
}

version = btcProxyVersion
group = "org.consensusj.bitcoin.proxyd"

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

repositories {
    if (useMavenLocal == "true") {
        mavenLocal()
    }
    mavenCentral()
    maven { url 'https://gitlab.com/api/v4/projects/8482916/packages/maven' }  // ConsensusJ/consensusj
    maven { url 'https://gitlab.com/api/v4/projects/26583853/packages/maven' }  // OmniJ
}

micronaut {
    version = "${micronautVersion}"
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("org.consensusj.bitcoin.proxyd.*")
    }
}

graalvmNative {
    binaries {
        main {
            imageName = 'btcproxyd'
            buildArgs.add('--initialize-at-run-time=io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod,io.netty.handler.ssl.OpenSsl,io.netty.handler.ssl.OpenSslPrivateKeyMethod,io.netty.internal.tcnative.CertificateVerifier,io.netty.internal.tcnative.SSL,io.netty.internal.tcnative.SSLPrivateKeyMethod')
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(17)
                vendor = JvmVendorSpec.matching("GraalVM Community")
            }
        }
    }
}

dependencies {
    compileOnly("org.graalvm.nativeimage:svm")
    implementation "io.micronaut:micronaut-jackson-databind"
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.acme:micronaut-acme")
    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3")

    runtimeOnly "org.yaml:snakeyaml"
    runtimeOnly("ch.qos.logback:logback-classic")

    implementation 'org.bouncycastle:bcprov-jdk15to18:1.76'

    implementation "com.msgilligan:cj-btc-jsonrpc:${consensusjVersion}"
    implementation "com.msgilligan:cj-btc-rx-jsonrpc:${consensusjVersion}"

    implementation "foundation.omni:omnij-jsonrpc:${omnijVersion}"
    implementation "foundation.omni:omnij-net-api:${omnijVersion}"

    testImplementation "com.msgilligan:consensusj-jsonrpc-gvy:${consensusjVersion}"
}

application {
    mainClass.set("org.consensusj.bitcoin.proxyd.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}


run {
    def runConfigPath = "${project.rootDir}/config/proxy-omni-regtest.yml"
    environment(['MICRONAUT_CONFIG_FILES':runConfigPath])
}

test {
    // Don't use MICRONAUT_CONFIG_FILES env variable in test
    environment(['MICRONAUT_CONFIG_FILES':''])
}

// TODO: See if we can use this HOW-TO to build AMD64 & ARM64: https://dev.to/cloudx/multi-arch-docker-images-the-easy-way-with-github-actions-4k54
// See also: https://github.com/bmuschko/gradle-docker-plugin/issues/967#issuecomment-1103768609

tasks.named("dockerfile") {
    baseImage = "eclipse-temurin:17-jre-jammy"
}

dockerBuild {
    images = ["${System.env.DOCKER_IMAGE ?: project.name + '-jit'}:$project.version"]
}

dockerBuildNative {
    images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
}

def registry = 'consensusj'
def jitImageName = "$project.name-jit"
def nativeImageName = "$project.name"

// Build and Push btcproxyd-jit for ARM64 and AMD64 architectures
task dockerBuildxImage(type:Exec) {
    group 'build'
    description "Builds multiplatform image using 'docker buildx'"
    dependsOn dockerfile, buildLayers
    workingDir 'build/docker/main'
    executable 'docker'
    args = ['buildx', 'build', '--platform', 'linux/amd64,linux/arm64',
            '-t', "$registry/$jitImageName:$project.version",
            '-t', "$registry/$jitImageName:latest", '--push',  '.']
}

task dockerBuildxNativeImage(type:Exec) {
    group 'build'
    description "Builds multiplatform native image using 'docker buildx'"
    dependsOn dockerfileNative, buildNativeLayersTask, dockerPrepareContext
    workingDir 'build/docker/native-main'
    executable 'docker'
    args = ['buildx', 'build', '--file', 'DockerfileNative','--platform', 'linux/amd64,linux/arm64',
            '-t', "$registry/$nativeImageName:$project.version",
            '-t', "$registry/$nativeImageName:latest", '--push',  '.']
}

apply from: 'gradle/asciidoctor.gradle'
apply from: 'gradle/github-pages.gradle'
