plugins {
    id("groovy")
    id 'org.asciidoctor.jvm.convert'        version '3.3.2'
    id 'org.asciidoctor.jvm.pdf'            version '3.3.2'
    id 'org.ajoberstar.git-publish'         version '2.1.3'
    id("io.micronaut.application")          version "${micronautAppGradlePluginVersion}"
}

version = btcProxyVersion
group = "org.consensusj.bitcoin.proxyd"

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

repositories {
    if (useMavenLocal == "true") {
        mavenLocal()
    }
    mavenCentral()
    maven { url 'https://gitlab.com/api/v4/projects/8482916/packages/maven' }  // ConsensusJ/consensusj
    maven { url 'https://gitlab.com/api/v4/projects/26583853/packages/maven' }  // OmniJ
}

micronaut {
    version = "${micronautVersion}"
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("org.consensusj.bitcoin.proxyd.*")
    }
}

graalvmNative {
    binaries {
        main {
            imageName = 'btcproxyd'
            buildArgs.add('--initialize-at-run-time=io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod,io.netty.handler.ssl.OpenSsl,io.netty.handler.ssl.OpenSslPrivateKeyMethod,io.netty.internal.tcnative.CertificateVerifier,io.netty.internal.tcnative.SSL,io.netty.internal.tcnative.SSLPrivateKeyMethod')
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(17)
                vendor = JvmVendorSpec.matching("GraalVM Community")
            }
        }
    }
}

dependencies {
    compileOnly("org.graalvm.nativeimage:svm")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.acme:micronaut-acme")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    runtimeOnly("ch.qos.logback:logback-classic")

    implementation "com.msgilligan:cj-btc-jsonrpc:${consensusjVersion}"
    implementation "com.msgilligan:cj-btc-rx-jsonrpc:${consensusjVersion}"

    implementation "foundation.omni:omnij-jsonrpc:${omnijVersion}"
    implementation "foundation.omni:omnij-net-api:${omnijVersion}"
}


application {
    mainClass.set("org.consensusj.bitcoin.proxyd.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}


run {
    def runConfigPath = "${project.rootDir}/config/proxy-omni-regtest.yml"
    environment(['MICRONAUT_CONFIG_FILES':runConfigPath])
}

test {
    // Don't use MICRONAUT_CONFIG_FILES env variable in test
    environment(['MICRONAUT_CONFIG_FILES':''])
}


dockerBuild {
    images = ["${System.env.DOCKER_IMAGE ?: project.name + '-jit'}:$project.version"]
}

dockerBuildNative {
    images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
}

apply from: 'gradle/asciidoctor.gradle'
apply from: 'gradle/github-pages.gradle'


